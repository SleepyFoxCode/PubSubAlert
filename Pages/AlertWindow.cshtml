@page
@model AlertWindowModel
@{
    ViewData["Title"] = "AlertWindow - code.sleepyfox.net/pubsubalert";
    Layout = "";    // We set layout empty so the _layout file will not be loaded
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AlertWindow</title>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-plugins/js.cookie-2.2.1.min.js"></script>
    <link rel="stylesheet" href="~/css/alertwindow.css"/>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Bangers&&display=swap" rel="stylesheet">

</head>
<body>
@Html.AntiForgeryToken()
    <div id="main">
        <div id="alert">
            <img class="image" src="@Model.alertSettings.url"/>
            <label id="msg" style="color:@Model.alertSettings.font_color_msg; font-weight:bold;word-break:break-word; margin-left:auto; margin-right: auto; font-size:@Model.alertSettings.font_size_msg; font-family:@Model.alertSettings.font_family;"></label>    
            <label id="user_msg" style="color:@Model.alertSettings.font_color_msg; word-break:break-word; font-style:italic; margin-left:auto; margin-right: auto; font-size:1.7em; font-family:@Model.alertSettings.font_family;"></label>        
        </div>
    </div>
</body>
</html>



<script language="javascript" type="text/javascript">
// Object that we use to store the current object to update the alert in the html documnent when an alert occurs
var alert_obj = {
    title: null,
    usermsg: null,
    cost: null,
    img: null,
    default_img: null,
    user: null
}

// Array to store all events that needs to be played. Event that was played will be removed
var alert_queue = [];
// To check if an alert is currently playing. If yes, the function will be skipped
var alert_playing = false;

// Check for new alerts from our websocket. If new alerts are fetched they will be added to pub_sub_queue array
var checkInterval = setInterval(function(){
  checkForPubSubAlerts()
}, 5000);

// We check if events are in the queue. If yes, [0] will be played and removed
var alertInterval = setInterval(function(){
    if(alert_queue.length > 0 && alert_playing != true){
        alert_playing = true;
        startPubSubAlert()
    }
}, 2500);

// Update the object to the current alert. It also calls the function to finally show it
function startPubSubAlert(){
            //Clear last object
            alert_obj.title = null;
            alert_obj.cost = null;
            alert_obj.img = null;
            alert_obj.default_img = null;
            alert_obj.usermsg = null;
            alert_obj.user = null;
            //Setup object
            alert_obj.title = alert_queue[0].title;
            alert_obj.cost = alert_queue[0].cost;
            alert_obj.img = alert_queue[0].image;
            alert_obj.default_img = alert_queue[0].default_image;
            alert_obj.usermsg = alert_queue[0].user_input;
            alert_obj.user = alert_queue[0].display_name;

            setupAlert();
            // Remove alert from queue because it played
            alert_queue.shift();
}

// Function to show
function setupAlert(){

    var raw_msg = "@Model.alertSettings.msg"
    raw_msg = raw_msg.replace("{user}", alert_obj.user)
    raw_msg = raw_msg.replace("{item}", alert_obj.title)
    raw_msg = raw_msg.replace("{price}", alert_obj.cost)

    
    var msg_label = document.getElementById("msg");
    msg_label.innerHTML = ""
    msg_label.append(document.createTextNode(raw_msg));

    var usermsg_label = document.getElementById("user_msg")
    usermsg_label.innerHTML = ""
    if(alert_obj.usermsg != null){
        usermsg_label.append(document.createTextNode('"' + alert_obj.usermsg + '"'))
    }

    var audio = new Audio("resources\\sounds\\" + "@Model.alertSettings.sound" + ".wav")
    audio.volume = @Model.alertSettings.volume
    audio.play()

    // We want the alert to be a flex box. This is a workaround so the Query function doesn't change display:flex to display:block
    jQuery(function(){
        $('#alert')
        .css("display", "flex")
        .hide()
        .fadeIn(1000);
    })

    // Fadeout the alert from the value the client chose. alert_playing is now false again so next alert can play
    setTimeout(function(){ 
        jQuery(function(){
            alert_playing = false;
            $('#alert').fadeOut(1000);
        }) 
    }, @Model.alertSettings.duration * 1000);
}


// Check for new alerts from our websocket. If new alerts are fetched they will be added to pub_sub_queue array
function checkForPubSubAlerts() {
    $.ajax({
            type: "POST",
            url: 'alertwindow?handler=GetNewPubSubs&id=@Model.id', 
            contentType: "application/x-www-form-urlencoded",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            success: function(data){
                if(data == "Error") {
                    return;
                }
                json = JSON.parse(data)
                for(var i = 0; i < json.length; i++){
                    alert_queue.push(json[i]);
                }
            }
    })
}
 </script>