@page
@model DashboardModel
@{
    ViewData["Title"] = "Dashboard";
}
<link rel="stylesheet" href="~/css/dashboard.css"/>


@Html.AntiForgeryToken()
<div id="main" class="col-md-12">
    <div id="welcome-container">
        <h1>Welcome @Model.UserObject.Information.display_name!</h1>
        <p>
            This page enables you to see all incoming redemptions on your channel. <br>
            Try it out by redeeming something to yourself! <br>
            <br>
            The Alert Window is independent from this site. So if you want you can close the dashboard and just have 
            the Alert Window open. You also can just copy the URL from the Alert Window and use it as an OBS Browser Source 
            <br>
            <br>
            <b>Only have one Alert Window open. Either in OBS (Browser Source) or in your browser. Or else the wrong window could be in focus.</b>
        </p>
    </div>
    <hr/>
    <div id="pubsub-container" class="col-md-12">
        <button type="button" class="btn btn-primary" id="alertwindow-open-btn">Open Alert Window</button>
        <button type="button" class="btn btn-info" id="testalert-send-btn">Test Alert</button>
        <button class="btn btn-secondary" type="button" data-toggle="collapse" data-target="#alertwindow-settings-container" aria-expanded="false" aria-controls="alertwindow-settings-container">Settings</button>
        <span>(By refreshing this site or the alert window you clear all old redeems.)</span>
        <div id="alertwindow-settings-container" class="collapse">
            <div class="alertwindow-settings-item" style="display: flex;"> 
                <label class="alertwindow-settings-item-label">Message</label>
                <input class="alertwindow-settings-item-input" id="alertwindow-settings-msg" type="text" value="{user} redeemed {item} for {price}!">
            </div>
            <div class="alertwindow-settings-item" style="display: flex;">
                <label class="alertwindow-settings-item-label">Duration</label>
                <input id="alertwindow-settings-duration" class="alertwindow-settings-item-input" type="range" min="5" max="20" />
                <label class="alertwindow-settings-duration-label" style="margin-left: 0.3em"></label>
            </div>
            <div class="alertwindow-settings-item">
                <label class="alertwindow-settings-item-label">Image</label>
                <input class="alertwindow-settings-item-input" type="text" id="alertwindow-settings-img" placeholder="https://www.example.com/image.png" value="" />
                <span style="margin-left: 1em;color:#7e8892;">It's important to use a direct link to an image or gif</span>
            </div>
            <div class="alertwindow-settings-item">
                <label class="alertwindow-settings-item-label">Alert Sound</label>
                <select id="alertwindow-settings-sound">
                    <option style="">1</option>
                    <option style="">2</option>
                </select>
                <button type="button" class="btn btn-secondary" id="alertwindow-settings-soundplay-btn">Play</button>
            </div>
            <div class="alertwindow-settings-item" style="display: flex;">
                <label class="alertwindow-settings-item-label">Sound Volume</label>
                <input id="alertwindow-settings-soundvolume" class="alertwindow-settings-item-input" type="range" min="1" max="100" value="50" />
                <label class="alertwindow-settings-soundvolume-label" style="margin-left: 0.3em"></label>
            </div>
            <div class="alertwindow-settings-item">
                <label class="alertwindow-settings-item-label">Font-Family</label>
                <select id="alertwindow-settings-fontfamily">
                    <option style="font-family:roboto">Roboto</option>
                    <option style="font-family:bangers">Bangers</option>
                    <option style="font-family:Arial">Arial</option>
                    <option style="font-family:Comic Sans MS">Comic Sans MS</option>
                    <option style="font-family:Impact">Impact</option>
                    <option style="font-family:Tahoma">Tahoma</option>
                    <option style="font-family:Verdana">Verdana</option>
                    <option style="font-family:Times New Roman">Times New Roman</option>
                    <option style="font-family:Courier New">Courier New</option>
                    <option style="font-family:Calibri">Calibri</option>
                    <option style="font-family:Monaco">Monaco</option>
                    <option style="font-family:Josefin Sans">Josefin Sans</option>
                    <option style="font-family:Dancing Script">Dancing Script</option>
                    <option style="font-family:Lobster">Lobster</option>
                    <option style="font-family:Indie Flower">Indie Flower</option>
                    <option style="font-family:Permanent Marker">Permanent Marker</option>
                    <option style="font-family:Fredoka One">Fredoka One</option>
                </select>
            </div>
            <div class="alertwindow-settings-item" style="display: flex;">
                <label class="alertwindow-settings-item-label">Font-Size</label>
                <input class="alertwindow-settings-item-input" id="alertwindow-settings-fontsize" type="range" min="5" max="20" value="10" />
                <label class="alertwindow-settings-fontsize-label" style="margin-left: 0.3em"></label>
            </div>
            <div class="alertwindow-settings-item" style="display:flex">
                <label class="alertwindow-settings-item-label">Font-Color</label>
                <input class="alertwindow-settings-item-input" type="text" id="alertwindow-settings-fontcolor" value="#FFFFFF" />
                <a href="https://htmlcolorcodes.com/" target="_blank" style="margin-left: 0.5em;">Choose a color</a>
            </div>
            <div id="settings-btn-container">
                <button type="button" id="alertwindow-settings-save-btn" class="btn btn-secondary">Save</button>
                <button type="button" id="alertwindow-settings-restore-btn" class="btn btn-secondary">Restore</button>
            </div>
        </div>



        <h5 id="notification-container-title">Redeem Notifications</h5>
        <div id ="notification-container" class="col-md-12">
            <ul id ="notification-list"></ul>
        </div>
    </div>
</div>

<script language="javascript" type="text/javascript">
// GLOBAL VARIABLES

var pubsubNotifications = [];

// DOCUMENT READY
    
// We check the localstorage if settings are saved from earlier
$(document).ready(function() {
    restoreAlertSettings()
});

// INTERVALS

// Check for new alerts from our websocket. If new alerts are fetched they will be added to pubsubNotifications array
window.setInterval(function(){
    checkForPubSubNotifications()
}, 10000);

// We check if notifications are in the queue. If yes, [0] will be played and removed
window.setInterval(function(){
    if(pubsubNotifications.length > 0) pubSubAlert()
}, 5000);

// JQuery functions so the sliders and all work
$(document).ready(function() {
  const $fontSizeMsgLabel = $('.alertwindow-settings-fontsize-label');
  const $value = $('#alertwindow-settings-fontsize');

  $fontSizeMsgLabel.html($value.val());
  $value.on('input change', () => {
    $fontSizeMsgLabel.html($value.val());
  });
});

$(document).ready(function() {
  const $soundVolumeLabel = $('.alertwindow-settings-soundvolume-label');
  const $value = $('#alertwindow-settings-soundvolume');

  $soundVolumeLabel.html($value.val());
  $value.on('input change', () => {
    $soundVolumeLabel.html($value.val());
  });
});

$(document).ready(function() {
  const $durationLabel = $('.alertwindow-settings-duration-label');
  const $value = $('#alertwindow-settings-duration');

  $durationLabel.html($value.val());
  $value.on('input change', () => {
    $durationLabel.html($value.val());
  });
});


// EVENTLISTENERS

// Listener for button to play the currently selected sound
document.getElementById("alertwindow-settings-soundplay-btn").addEventListener("click", function(){
    var volume = document.getElementById("alertwindow-settings-soundvolume").value / 100
    var selection = document.getElementById("alertwindow-settings-sound").value
    var audio;

    switch(parseInt(selection)){
        case 1:
            audio = new Audio("resources\\sounds\\1.wav")
            break;
        case 2:
            audio = new Audio("resources\\sounds\\2.wav")
            break;
    }
    audio.volume = volume
    audio.play()
},false)

// Listener for button to save all settings for the alert in the localstorage
document.getElementById("alertwindow-settings-save-btn").addEventListener("click", function(){
    saveAlertSettings();
    alert("Settings saved.")
}, false)

// Listener for button to restore all settings back to the saved ones in the localstorage
document.getElementById("alertwindow-settings-restore-btn").addEventListener("click", function(){
    restoreAlertSettings()
}, false)

document.getElementById('alertwindow-open-btn').addEventListener("click", function() {
    openAlertWindow();
}, false);

// puts test data into the websocket pubsub files to create a test alert/notification
document.getElementById('testalert-send-btn').addEventListener("click", function(){
   $.ajax({
        type: "POST",
        url: 'dashboard?handler=GetNewPubSubsTest', 
        contentType: "application/x-www-form-urlencoded",
        beforeSend: function (xhr) {
            xhr.setRequestHeader("XSRF-TOKEN",
                $('input:hidden[name="__RequestVerificationToken"]').val());
            alert("Sent test alert.")
        },
        success: function(data){
            var json = []
            if(data == "Error") {
                return;
            }
            json = JSON.parse(data)
            
            for(var i = 0; i < json.length; i++){
                pubsubNotifications.push(json[i]);
            }
        }
   })
})

// FUNCTIONS

function saveAlertSettings(){
    localStorage.setItem('alertwindow-settings-msg', document.getElementById("alertwindow-settings-msg").value)
    localStorage.setItem('alertwindow-settings-duration', document.getElementById("alertwindow-settings-duration").value)
    localStorage.setItem('alertwindow-settings-img', document.getElementById("alertwindow-settings-img").value)
    localStorage.setItem('alertwindow-settings-sound', document.getElementById("alertwindow-settings-sound").value)
    localStorage.setItem('alertwindow-settings-soundvolume', document.getElementById("alertwindow-settings-soundvolume").value)
    localStorage.setItem('alertwindow-settings-fontfamily', document.getElementById("alertwindow-settings-fontfamily").value)
    localStorage.setItem('alertwindow-settings-fontsize', document.getElementById("alertwindow-settings-fontsize").value)
    localStorage.setItem('alertwindow-settings-fontcolor', document.getElementById("alertwindow-settings-fontcolor").value)
}

// Restore all values in settings if they are saved in localstorage
function restoreAlertSettings(){

    if(localStorage.getItem('alertwindow-settings-msg') != null){
        document.getElementById("alertwindow-settings-msg").value = localStorage.getItem('alertwindow-settings-msg')
    }
    if(localStorage.getItem('alertwindow-settings-duration') != null){
        document.getElementById("alertwindow-settings-duration").value = localStorage.getItem('alertwindow-settings-duration')
    }
    if(localStorage.getItem('alertwindow-settings-img') != null){
        document.getElementById("alertwindow-settings-img").value = localStorage.getItem('alertwindow-settings-img')
    }
    if(localStorage.getItem('alertwindow-settings-sound') != null){
        document.getElementById("alertwindow-settings-sound").value = localStorage.getItem('alertwindow-settings-sound')
    }
    if(localStorage.getItem('alertwindow-settings-soundvolume') != null){
        document.getElementById("alertwindow-settings-soundvolume").value = localStorage.getItem('alertwindow-settings-soundvolume')
    }
    if(localStorage.getItem('alertwindow-settings-fontfamily') != null){
        document.getElementById("alertwindow-settings-fontfamily").value = localStorage.getItem('alertwindow-settings-fontfamily')
    }
    if(localStorage.getItem('alertwindow-settings-fontsize') != null){
        document.getElementById("alertwindow-settings-fontsize").value = localStorage.getItem('alertwindow-settings-fontsize')
    }
    if(localStorage.getItem('alertwindow-settings-fontcolor') != null){
        document.getElementById("alertwindow-settings-fontcolor").value = localStorage.getItem('alertwindow-settings-fontcolor')
    }
}

// Opens a new window to display incoming alerts
function openAlertWindow(){
    // Get values from document
    var alertMsgVal = document.getElementById("alertwindow-settings-msg").value
    var alertDurationVal = document.getElementById("alertwindow-settings-duration").value;
    var alertImageVal = document.getElementById("alertwindow-settings-img").value;
    var alertFontfamilyVal = document.getElementById("alertwindow-settings-fontfamily").value;
    var alertFontsizeVal = document.getElementById("alertwindow-settings-fontsize").value / 5;
    var alertFontcolorVal = document.getElementById("alertwindow-settings-fontcolor").value;
    var alertSoundVolumeVal = document.getElementById("alertwindow-settings-soundvolume").value / 100
    var alertSoundSelectionVal = document.getElementById("alertwindow-settings-sound").value

    // We can't send get-parameters with a '#' in it. So we remove it
    if(alertFontcolorVal.includes('#')){
        alertFontcolorVal = alertFontcolorVal.split('#').join('')
    }

    // todo: remove spaces in input
    // Creating the url with get parameters (With an id because the alertwindow doesn't have cookies in obs)
    var urlString = "alertwindow?" + 
    "msg=" + alertMsgVal +
    "&duration=" + alertDurationVal +
    "&img=" + alertImageVal +
    "&fontfamily=" + alertFontfamilyVal + 
    "&fontsize=" + alertFontsizeVal + 
    "&fontcolor=" + alertFontcolorVal +
    "&sound=" + alertSoundSelectionVal +
    "&volume=" + alertSoundVolumeVal +
    "&id=" + @Model.UserObject.Information.id

    window.open(urlString, "targetWindow", 'toolbar=no, status=no, menubar=no, scrollbars=no, resizable=yes, width=800, height=600');
}


function pubSubAlert(){
    // We create the dom-list-element to display on the document
    var ulist = document.getElementById('notification-list');
        var listElement = document.createElement("li");
        listElement.className = "notification-list-item";
            var header = document.createElement("div");
            header.className = "notification-list-item-header";
                var headerImg = document.createElement("img");
                if(pubsubNotifications[0].image != null){
                    headerImg.setAttribute("src", pubsubNotifications[0].image)
                }
                else{
                    headerImg.setAttribute("src", pubsubNotifications[0].default_image)
                }
                headerImg.className = "notification-list-item-header-img"
                header.appendChild(headerImg);

                var title = document.createElement("div");
                title.className = "notification-list-item-header-title";
                title.appendChild(document.createTextNode(pubsubNotifications[0].title))
                header.appendChild(title)

                var cost = document.createElement("div");
                cost.className = "notification-list-item-header-cost";
                cost.appendChild(document.createTextNode(pubsubNotifications[0].cost))
                header.appendChild(cost);

            var username = document.createElement("div");
            username.className = "notification-list-item-body-username";
            username.appendChild(document.createTextNode(pubsubNotifications[0].display_name))
            var msg = document.createElement("div");
            msg.className = "notification-list-item-body-msg";
            // user_input can be empty so we check
            if(pubsubNotifications[0].user_input != null){
                msg.appendChild(document.createTextNode('"' + pubsubNotifications[0].user_input + '"'))
            }
            var timestamp = document.createElement("div");
            timestamp.className = "notification-list-item-body-timestamp";
            timestamp.appendChild(document.createTextNode(pubsubNotifications[0].redeemed_at))

        listElement.appendChild(header);
        listElement.appendChild(username);
        listElement.appendChild(msg);
        listElement.appendChild(timestamp);
    // Push the element to the beginning if list is not empty
    if(ulist.childElementCount > 0){
        ulist.insertBefore(listElement, ulist.firstChild);
        pubsubNotifications.shift();
    }
    else ulist.appendChild(listElement)

    // Remove first alert from the queue because be displayed it now
    pubsubNotifications.shift();
}

// Check for new alerts from our websocket. If new alerts are fetched they will be added to pubsubNotifications array
function checkForPubSubNotifications() {
   $.ajax({
        type: "POST",
        url: 'dashboard?handler=GetNewPubSubs', 
        contentType: "application/x-www-form-urlencoded",
        beforeSend: function (xhr) {
            xhr.setRequestHeader("XSRF-TOKEN",
                $('input:hidden[name="__RequestVerificationToken"]').val());
        },
        success: function(data){
            var json = []
            if(data == "Error") {
                return;
            }
            json = JSON.parse(data)
            
            for(var i = 0; i < json.length; i++){
                pubsubNotifications.push(json[i]);
            }
        }
   })
 }
</script>




